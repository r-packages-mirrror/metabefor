% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transform_in_every_clusteredEntity.R
\name{transform_in_every_clusteringEntity}
\alias{transform_in_every_clusteringEntity}
\title{Perform a transformation for every clustering entity}
\usage{
transform_in_every_clusteringEntity(
  x,
  newEntityName,
  fun,
  funArgs = NULL,
  entityId_regex = NULL,
  requiredField_regex = NULL
)
}
\arguments{
\item{x}{The full Rxs project object (as produced
by \code{\link[=rxs_parseExtractionScripts]{rxs_parseExtractionScripts()}}).}

\item{newEntityName}{The name of the new entity to add to the clustering
entity (i.e., the target entity's parent entity, a container entity).}

\item{fun}{The function to apply.}

\item{funArgs}{The arguments, as a character vector where each element is
a clustered entity stored in the clustering entity, and each element's name
is how that entity's value should be passed to \code{fun} (allowing you to
specify that you want to pass, for example, \code{uni.mean} and \code{uni.sd} as
arguments \code{mean} and \code{sd}, respectively, to \code{fun}). Anything in this vector
that is not the identifier of a clustered entity is passed as is.}

\item{entityId_regex}{An optional regular expression: if specified, only
entity nodes with entity identifiers that match this regular expression will
be processed.}

\item{requiredField_regex}{An optional regular expression specifying a field
that the clustering entity must contain for it to be processed.}
}
\value{
Invisibly, the full Rxs project object. Note that the Rxs trees
will be changed in place given \code{data.tree}'s pass-by-reference logic; so
you can discard the result.
}
\description{
\code{\link[=transform_in_every_clusteringEntity]{transform_in_every_clusteringEntity()}} takes a full
Rxs project object (as produced
by \code{\link[=rxs_parseExtractionScripts]{rxs_parseExtractionScripts()}}) and processes all Rxs
trees, looking for clustering entities that match the \code{entityId_regex}
regular expression (for information about what clustering entities are,
see \url{https://sysrevving.com/glossary.html})
and/or that contain a field matching the \code{requiredField_regex} regular
expression, and passes those to function \code{fun} with \code{funArgs} as
arguments. For \code{funArgs}, you can pass entity identifiers of clustered
entities contained in the clustering entity. These are then assigned the
corresponding name before \code{fun} is called using \code{do.call}. This allows
you to select values and rename them to match the function arguments.
}
\examples{
### Load an example Rxs project
data('example_rxsProject_1', package="metabefor");

### Look at contents of a clustering entity holding
### information about an association between variables with
### identifiers 'chalk' and 'witches'
example_rxsProject_1$rxsTrees$qurid_7h50rzpq$associations$chalk_and_witches$value;

### Multiply the value of entity with identifier
### 'r' with 2 in all clustering entities
metabefor::transform_in_every_clusteringEntity(
  example_rxsProject_1,
  newEntityName = "double_the_r",
  fun = function(x) {
    return(x * 2);
  },
  funArgs = c(x = "r"),
  requiredField_regex = "^r$"
);

### See the added entity
example_rxsProject_1$rxsTrees$qurid_7h50rzpq$associations$chalk_and_witches$value;
}
